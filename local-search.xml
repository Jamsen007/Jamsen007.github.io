<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring AOP 分析(一)</title>
    <link href="/2023/03/18/SpringAOP%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/03/18/SpringAOP%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-AOP-分析-一"><a href="#Spring-AOP-分析-一" class="headerlink" title="Spring AOP 分析(一)"></a>Spring AOP 分析(一)</h1><h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><ul><li>本文基于spring-aop包5.3.20版本作为前提。</li><li>spring-aop是一种编程思想，aop是指使用切面方式进行编程，简单来说就是在一个方法执行前和执行后做处理。</li></ul><h2 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h2><h3 id="代理方式"><a href="#代理方式" class="headerlink" title="代理方式"></a>代理方式</h3><ol><li><p>静态代理</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">代理模式可以在不修改被代理对象的基础上，通过扩展代理类，进行一些功能的附加与增强。值得注意的是，代理类和被代理类应该共同实现一个接口，或者是共同继承某个类。<br></code></pre></td></tr></table></figure></li><li><p>动态代理</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less">静态代理的代理类需要实现与目标类一样的接口。而动态代理不需要。只需要实现<span class="hljs-selector-tag">InvocationHandler</span>类；<br>同时分为两种代理方式：<br><span class="hljs-selector-tag">jdk</span>动态代理(Proxy类和InvocationHandler接口来实现动态代理)<br><span class="hljs-selector-tag">cglib</span>动态代理(继承MethodInterceptor类使用Enhancer类创建代理对象)<br></code></pre></td></tr></table></figure></li></ol><h3 id="spring-aop中基础术语"><a href="#spring-aop中基础术语" class="headerlink" title="spring-aop中基础术语"></a>spring-aop中基础术语</h3><ul><li><strong>Aspect</strong>：切面。比如被@Aspect注解的类就是切面，理解为记录关系的类。</li><li><strong>Join point</strong>：连接点。可以理解为程序里面的一个方法的执行。</li><li><strong>Advice</strong>：通知。在指定的连接点执行的动作时机，理解为一个方法；同时Advice分为不同的类型（before、after、around），Spring框架中会用Interceptor拦截器来实现Advice，每个连接点对应一个Interceptor链。</li><li><strong>Pointcut</strong>：切点。用来匹配一个或多个连接点，Advice与切点表达式是关联在一起的，Advice将会执行在和切点表达式所匹配的连接点上。</li><li><strong>Weaving</strong>：织入。创建代理对象的动作，这个动作可以发生在编译时期（比如Aspejctj），或者运行时，比如Spring AOP。</li><li><strong>Target object</strong>：目标对象，被代理的对象。</li><li><strong>advistor</strong>：顾问。包含一个Pointcut和一个advice，而aspect可以多个pointcut和多个advice。理解为把advice和Pointcut封装成一个advistor。</li></ul><h3 id="advice在spring-aop中对应的类"><a href="#advice在spring-aop中对应的类" class="headerlink" title="advice在spring-aop中对应的类"></a>advice在spring-aop中对应的类</h3><ul><li><strong>@Before</strong>：AspectJMethodBeforeAdvice，实际上就是一个MethodBeforeAdvice。</li><li><strong>@AfterReturning</strong>：AspectJAfterReturningAdvice，实际上就是一个AfterReturningAdvice。</li><li><strong>@AfterThrowing</strong>：AspectJAfterThrowingAdvice，实际上就是一个MethodInterceptor。</li><li><strong>@After</strong>：AspectJAfterAdvice，实际上就是一个MethodInterceptor。</li><li><strong>@Around</strong>：AspectJAroundAdvice，实际上就是一个MethodInterceptor</li></ul><p>关系图</p><p><img src="/hexo-blog/img/page/img-relation.png" alt="config"></p><p>左边类实现右边的类：</p><p><strong>AspectJAfterAdvice-&gt;MethodInterceptor, AfterAdvice</strong><br><strong>AspectJAfterThrowingAdvice-&gt;MethodInterceptor, AfterAdvice</strong><br><strong>AspectJAroundAdvice-&gt;MethodInterceptor</strong></p><p><strong>AspectJMethodBeforeAdvice-&gt;MethodBeforeAdvice-&gt;BeforeAdvice</strong><br><strong>AspectJAfterReturningAdvice-&gt;AfterReturningAdvice-&gt;AfterAdvice</strong></p><p>前面3个实现的原理就是依赖<strong>MethodInterceptor</strong>，后面两个分别依赖<strong>MethodBeforeAdviceInterceptor</strong>和<strong>AfterReturningAdviceInterceptor</strong>，但是这两个还是实现了<strong>MethodInterceptor</strong>。因此它们会组成一条Interceptor链路。</p><h2 id="三、代码例子"><a href="#三、代码例子" class="headerlink" title="三、代码例子"></a>三、代码例子</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 共同业务接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gongjuncheng</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICommonService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 被代理类，实现同一接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gongjuncheng</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TargetServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICommonService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;向数据库中插入名为：  &quot;</span>+name+<span class="hljs-string">&quot; 的用户&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 代理类，并且实现同一接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gongjuncheng</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICommonService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 被代理对象(目标对象)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ICommonService target;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过构造方法注入被代理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyServiceImpl</span><span class="hljs-params">(ICommonService object)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target = object;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;准备向数据库中插入数据&quot;</span>);<br>        target.add(name);<br>        System.out.println(<span class="hljs-string">&quot;插入数据库成功&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 测试静态代理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gong juncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTestStatic</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理模式---静态代理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 实例化需要被代理的类</span><br>        ICommonService target = <span class="hljs-keyword">new</span> TargetServiceImpl();<br>        <span class="hljs-comment">// 通过代理类对目标类进行代理，其实就是额外对目标类的某个方法进行特殊处理，添加点东西而已</span><br>        ProxyServiceImpl proxy = <span class="hljs-keyword">new</span> ProxyServiceImpl(target);<br>        <span class="hljs-comment">// 调用代理类的方法，该方法就是目标类的方法。</span><br>        proxy.add(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 实现接口动态代理-接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gong juncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String msg)</span></span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 实现接口动态代理-实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gong juncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubjectImple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;向数据库中插入名为：  &quot;</span>+name+<span class="hljs-string">&quot; 的用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world,&quot;</span>+msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 实现接口动态代理-代理工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gong juncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 被代理的目标类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyInvocationHandler</span><span class="hljs-params">(Object target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">// 在目标对象的方法执行之前简单的打印一下</span><br>        System.out.println(<span class="hljs-string">&quot;------------------before------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 执行目标对象的方法</span><br>        Object result = method.invoke(target, args);<br><br>        <span class="hljs-comment">// 在目标对象的方法执行之后简单的打印一下</span><br>        System.out.println(<span class="hljs-string">&quot;-------------------after------------------&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取被代理的目标类的代理对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.target.getClass().getClassLoader()<br>                ,<span class="hljs-keyword">this</span>.target.getClass().getInterfaces()<br>                ,<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 实现接口动态代理-测试启动类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: gong juncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTestDynamicInterface</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理模式---JDK动态代理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 使用传统的代理类实现InvocationHandler接口，再通过Proxy类的静态方法创建代理类</span><br><span class="hljs-comment">// 1.实例化等待被代理的实现类</span><br>        Subject subject = <span class="hljs-keyword">new</span> SubjectImple();<br>        <span class="hljs-comment">// 2.实例化InvocationHandler 代理处理器</span><br>        ProxyInvocationHandler proxyInvocationHandler = <span class="hljs-keyword">new</span> ProxyInvocationHandler(subject);<br>        <span class="hljs-comment">// 3.根据被代理实现类生成代理对象,这个getProxy方法可以不写在ProxyInvocationHandler里面，在这里写，ProxyInvocationHandler就可以给多个需要代理的方法共用。</span><br>        Subject proxySubject = (Subject) proxyInvocationHandler.getProxy();<br>        System.out.println(<span class="hljs-string">&quot;代理类路径：&quot;</span>+proxySubject.getClass());<br>        proxySubject.add(<span class="hljs-string">&quot;熊大&quot;</span>);<br>        proxySubject.say(<span class="hljs-string">&quot;my home&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 被代理类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gongjuncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceClass</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;进击的巨人....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;全世界阔以安息了...&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cglib动态代理的执行类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gongjuncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibProxyHandle</span></span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 被代理类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cglib的拦截器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> MethodInterceptor methodInterceptor;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CglibProxyHandle</span><span class="hljs-params">(Object target, MethodInterceptor methodInterceptor)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>        <span class="hljs-keyword">this</span>.methodInterceptor = methodInterceptor;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取被代理的目标类的代理对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        <span class="hljs-comment">// 设置代理类的父类</span><br>        enhancer.setSuperclass(target.getClass());<br>        <span class="hljs-comment">// 设置代理逻辑</span><br>        enhancer.setCallback(methodInterceptor);<br>        <span class="hljs-comment">// 创建代理对象</span><br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cglib的拦截器，真正处理被代理类的上下文操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gongjuncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibProxyMethodInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">if</span> (method.getName().equals(<span class="hljs-string">&quot;go&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;艾伦耶格尔开始出现&quot;</span>);<br>            methodProxy.invokeSuper(o,objects);<br>            System.out.println(<span class="hljs-string">&quot;大家快跑啊！！！！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> methodProxy.invokeSuper(o, objects);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gongjuncheng</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CglibProxyHandle proxyHandle = <span class="hljs-keyword">new</span> CglibProxyHandle(<span class="hljs-keyword">new</span> SourceClass(),<span class="hljs-keyword">new</span> CglibProxyMethodInterceptor());<br>        SourceClass sourceClass = (SourceClass) proxyHandle.getProxy();<br>        System.out.println(<span class="hljs-string">&quot;生成的代理类的路径：&quot;</span>+sourceClass.getClass());<br>        sourceClass.go();<br>        sourceClass.sleep();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文主要介绍了AOP的一些基本知识，动态代理中jdk代理和cglib代理的不同，以及代码的实现。</p><p>下文会讲会涉及部分源码知识点，敬请期待~~~</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-策略模式（搭配自定义注解+枚举）</title>
    <link href="/2021/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>链接</strong>：<br><a href="https://gitee.com/jasoninterface/design_pattern.git">这里就是Demo的链接地址，仅供参考哦</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>策略模式，顾名思义就是多种方法的意思。相信在互联网上各种资料都飞来飞去的情况，都知道这个作用了吧，<br>我主要说一下个人的理解。</p><p>一般使用策略模式，都会搭配模板模式，这两者的区别在于：</p><ul><li><strong>策略模式只是关注方法里面的实现逻辑。</strong></li><li><strong>模板模式只是关注于把多个方法抽离出来，注重于步骤。</strong></li></ul><p>当然，之所以搭配模板模式，一般都是方法比较多，而且都具有公共性质，所以才会抽离出来。</p><p>本教程主要使用策略模式+模板模式+自定义注解+枚举</p><p>下面直接开撸吧~~~</p><h2 id="开撸"><a href="#开撸" class="headerlink" title="开撸"></a>开撸</h2><p>1、去到spring官网，直接搭建一个spring boot项目。</p><p>2、创建枚举值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:20<br> **/<br>public enum PayCodeEnum &#123;<br><br>    PC_PAY(<span class="hljs-string">&quot;PC_PAY&quot;</span>,<span class="hljs-string">&quot;PC端支付&quot;</span>),<br>    MOBILE_PAY(<span class="hljs-string">&quot;MOBILE_PAY&quot;</span>,<span class="hljs-string">&quot;手机端支付&quot;</span>)<br><br>    ;<br><br>    private String key;<br>    private String value;<br><br>    PayCodeEnum(String key, String value) &#123;<br>        this.key = key;<br>        this.value = value;<br>    &#125;<br><br>    public String <span class="hljs-function"><span class="hljs-title">getKey</span></span>() &#123;<br>        <span class="hljs-built_in">return</span> key;<br>    &#125;<br><br>    public String <span class="hljs-function"><span class="hljs-title">getValue</span></span>() &#123;<br>        <span class="hljs-built_in">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、创建自定义注解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:24<br> **/<br>@Target(&#123;ElementType.TYPE&#125;)<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>public @interface PayChannel &#123;<br>    PayCodeEnum value();<br>&#125;<br></code></pre></td></tr></table></figure><p>4、创建公共接口，这里定义了具体提供给外部的接口，就是入口嘛。你懂的~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:11<br> **/<br>public interface IBizService &#123;<br><br>    void pay();<br><br>    void refund();<br>&#125;<br></code></pre></td></tr></table></figure><p>5、创建抽象类，该类就是用来封装粒度比较大的方法，然后使用模板方法抽离具体的方法步骤。~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:12<br> **/<br>@Slf4j<br>@Component<br>public abstract class BizAbstractService implements IBizService &#123;<br><br>    public abstract void verify();<br><br>    public abstract void buildParams();<br><br>    private void <span class="hljs-function"><span class="hljs-title">handlePay</span></span>()&#123;<br>        log.info(<span class="hljs-string">&quot;支付成功&quot;</span>);<br>    &#125;<br><br>    private void <span class="hljs-function"><span class="hljs-title">handleRefund</span></span>()&#123;<br>        log.info(<span class="hljs-string">&quot;退款成功&quot;</span>);<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">pay</span></span>() &#123;<br>        verify();<br>        handlePay();<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">refund</span></span>() &#123;<br>        buildParams();<br>        handleRefund();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、创建加载类，我喜欢用factory来命名，虽然不是个工厂类，不过就是想象一个专门把策略加载到一个容器里面的工厂！GO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:04<br> **/<br>@Component<br>public class BizFactory implements ApplicationContextAware, ApplicationListener&lt;ContextRefreshedEvent&gt; &#123;<br><br>    private ApplicationContext applicationContext;<br><br>    // 这个就是容器啦~，就像spring容器一样呗。<br>    private static final Map&lt;String, IBizService&gt; strategys = new ConcurrentHashMap&lt;&gt;();<br><br>    public IBizService getStrategy(String channel)&#123;<br>        // 这里可以提供给外部使用，到底用什么策略，通过参数定义<br>         <span class="hljs-built_in">return</span> Optional.ofNullable(strategys.get(channel))<br>            .orElseThrow(<br>                () -&gt;<br>                    new IllegalStateException(<span class="hljs-string">&quot;找不到该策略:&quot;</span> + channel));<br>    &#125;<br><br>    @Override<br>    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;<br>        this.applicationContext = applicationContext;<br>    &#125;<br><br>    private synchronized void <span class="hljs-function"><span class="hljs-title">init</span></span>()&#123;<br>        // 这个方法就是获取实现类某个接口的所有类，很有用的哦，开发的时候给你很大的便捷性。<br>        Map&lt;String, IBizService&gt; strategyMap = applicationContext.getBeansOfType(IBizService.class);<br>        // 这里就是围殴了装13而已，用了流的方式，高大上点有木有？<br>        strategyMap.forEach(<br>            (name, strategy) -&gt; &#123;<br>                PayChannel channel =<br>                    Optional.ofNullable(strategy.getClass().getAnnotation(PayChannel.class))<br>                        .orElseThrow(<br>                            () -&gt; new IllegalStateException(<span class="hljs-string">&quot;注册策略失败:&quot;</span> + name));<br>                strategys.putIfAbsent(channel.value().getKey(), strategy);<br>            &#125;);<br>    &#125;<br><br>    // 这里是加载策略的时机，其实也可以用注解，就不用实现 ApplicationListener&lt;ContextRefreshedEvent&gt;<br>    @Override<br>    public void onApplicationEvent(ContextRefreshedEvent event) &#123;<br>        init();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>7、创建两个策略，一个是PC端，一个是移动端~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:27<br> **/<br>@Service<br>@Slf4j<br>@PayChannel(value = PayCodeEnum.MOBILE_PAY)<br>public class PayByMobileService extends BizAbstractService &#123;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">verify</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;手机端校验参数&quot;</span>);<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">buildParams</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;手机端构建退款参数&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:25<br> **/<br>@Service<br>@Slf4j<br>@PayChannel(value = PayCodeEnum.PC_PAY)<br>public class PaybyPcService extends BizAbstractService &#123;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">verify</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;PC端校验参数&quot;</span>);<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">buildParams</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;PC端构建退款参数&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8、开始测试~，不多BB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">@SpringBootTest<br>class PatternApplicationTests &#123;<br><br>@Resource<br>private BizFactory factory;<br><br>@Test<br>void <span class="hljs-function"><span class="hljs-title">contextLoads</span></span>() &#123;<br>factory.getStrategy(PayCodeEnum.PC_PAY.getKey()).pay();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>微信扫一下二维码，不定时分享有趣的事情哦：</p><p><img src="/hexo-blog/img/page/pic.jpg" alt="pic"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee + Hexo + Fluid 搭建个人免费网站</title>
    <link href="/2021/10/17/Gitee%20+%20Hexo%20+%20Fluid%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99/"/>
    <url>/2021/10/17/Gitee%20+%20Hexo%20+%20Fluid%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p><strong>链接</strong>：<br>1.<a href="https://hexo.io/">Hexo</a><br>2.<a href="https://gitee.com/">Gitee</a><br>3.<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid主题</a>  </p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="1-nodejs-npm的安装"><a href="#1-nodejs-npm的安装" class="headerlink" title="1. nodejs+npm的安装"></a>1. nodejs+npm的安装</h3><ul><li><strong>从nodejs官网直接下载，并且根据顺序安装文件到对应的位置，就完成</strong><br>因为nodejs内部已经集成npm，所以不必要分开下载，地址:<a href="https://nodejs.org/">nodejs+npm</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node -v  <br>$ npm -v<br></code></pre></td></tr></table></figure><p>上面校验本地是否安装完成，如下图：<br><img src="/hexo-blog/img/page/node+npm.jpg" alt="npm,nodejs"></p><ul><li><strong>新建node_global和node_cache文件夹，避免npm安装的依赖全部堆积到默认盘</strong></li></ul><p>因为默认的npm下载依赖安装路径都是在 ‘C:\Users\你自己电脑名字\AppData\Roaming\npm’ 路径下面，所以我们一般会更改这个位置</p><p>1.在安装nodejs的目录下，新建上面两个文件夹，如下图：<br><img src="/hexo-blog/img/page/createFolder.png" alt="folder"></p><p>2.配置全局环境变量</p><p>用户变量：<br>编辑PATH，添加’C:\Program Files\nodejs\node_global’路径<br>系统变量：<br>新建变量，名字NODE_PATH,值’C:\Program Files\nodejs\node_modules’</p><p>3.然后运行执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;C:\Program Files\nodejs\node_global&quot;</span>  <br>$ npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;C:\Program Files\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>最后npm安装的路径就会改变，查看效果，如下图:<br><img src="/hexo-blog/img/page/npmPath.jpg" alt="path"></p><h3 id="2-Git安装"><a href="#2-Git安装" class="headerlink" title="2. Git安装"></a>2. Git安装</h3><p>从Git官网下载稳定的版本，然后开始无脑点击下一步安装即可。<a href="https://git-scm.com/downloads">Git地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git version<br></code></pre></td></tr></table></figure><p>上面校验本地是否安装完成，如下图：<br><img src="/hexo-blog/img/page/git.png" alt="git"></p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="1-搭建Hexo网站"><a href="#1-搭建Hexo网站" class="headerlink" title="1. 搭建Hexo网站"></a>1. 搭建Hexo网站</h3><ul><li><p><strong>下载脚手架</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全局安装</span><br>$ npm install hexo-cli -g<br><span class="hljs-comment"># 查看hexo版本</span><br>$ hexo -v<br><br><span class="hljs-comment">#出现下面的，就是安装成功</span><br>hexo-cli: 4.3.0<br>os: win32 10.0.18363<br>node: 14.18.1<br>v8: 8.4.371.23-node.84<br>uv: 1.42.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.17.2<br>modules: 83<br>nghttp2: 1.42.0<br>napi: 8<br>llhttp: 2.1.4<br>openssl: 1.1.1l<br>cldr: 39.0<br>icu: 69.1<br>tz: 2021a<br>unicode: 13.0<br></code></pre></td></tr></table></figure></li><li><p><strong>初始化项目</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init 项目名字 <span class="hljs-comment"># 初始化</span><br><br>found 0 vulnerabilities<br>INFO  Start blogging with Hexo! <span class="hljs-comment">#安装成功</span><br><br>$ <span class="hljs-built_in">cd</span> 项目名字 <span class="hljs-comment"># 进入目录</span><br>$ npm install <span class="hljs-comment"># 安装npm</span><br>$ hexo server <span class="hljs-comment"># 启动服务</span><br><br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. <span class="hljs-comment"># 部署成功</span><br><br></code></pre></td></tr></table></figure><p>如下图：<br><img src="/hexo-blog/img/page/hexoSucceed.png" alt="succeed"></p><h3 id="2-部署网站到Gitee"><a href="#2-部署网站到Gitee" class="headerlink" title="2. 部署网站到Gitee"></a>2. 部署网站到Gitee</h3><ul><li><p><strong>创建账号</strong><br>这步可以跳过了吧，哈哈。</p></li><li><p><strong>新建仓库</strong></p></li></ul><p>仓库名称和仓库路径要尽量保持一致。</p><ul><li><strong>配置ssh</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># gitee用户名</span><br>$ git config --global user.email <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 邮箱</span><br><span class="hljs-comment"># 生成SSH公钥并添加到gitee，实现免密码登录</span><br><span class="hljs-comment"># 1、生成公钥</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;# 邮箱&quot;</span> <br></code></pre></td></tr></table></figure><p>把 C:\Users\主机名.ssh 目录，把 密钥名字.pub 里面的信息复制到gitee的 SSH公钥 </p><ul><li><strong>配置gitee pages</strong></li></ul><p>进入到仓库，点击管理选项，点击选项初始化 README.md 快速开启 SVN访问，然后点击服务，选择Gitee Pages，如果这个是第一次操作，需要身份证上传核实，然后等一天就可以重新回到这个界面操作。</p><p>然后按照下图操作即可：<br><img src="/hexo-blog/img/page/giteePagesConfig.png" alt="gitee pages"></p><ul><li><strong>配置项目的_config.yml文件</strong></li></ul><ol><li>修改url中的Gitee Pages地址</li><li>语言可修改为中文language: zh-cn</li><li>deploy 修改为Gitee Pages 的地址</li></ol><p>如下图：<br><img src="/hexo-blog/img/page/updateConfig.png" alt="config"></p><p><img src="/hexo-blog/img/page/repo.jpg" alt="config"></p><ul><li><strong>部署项目</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> 项目名字  <span class="hljs-comment">#进入项目目录</span><br>$ hexo clean <span class="hljs-comment">#清理缓存</span><br>$ hexo g <span class="hljs-comment">#生成网站文件</span><br>$ hexo s <span class="hljs-comment">#本地测试代码，Ctrl+c停止本地映射</span><br>$ hexo d <span class="hljs-comment">#推送本地代码到码云，第一推送需要输入gitee的账号密码 </span><br></code></pre></td></tr></table></figure><p>注意，每次部署了项目，都要在Gitee Pages里面点击更新</p><h3 id="3-搭配Fluid主题"><a href="#3-搭配Fluid主题" class="headerlink" title="3. 搭配Fluid主题"></a>3. 搭配Fluid主题</h3><p><strong>创建fluid的配置文件，该文件会永久覆盖_config.yml文件</strong></p><p>修改_config.yml的配置，找到theme，指定主题为：fluid</p><p>在_config.yml同目录创建_config.fluid.yml文件，里面的内容直接拷贝<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">这里</a></p><p>然后重启，就完成了。</p><p>如需要继续编辑或者写文章，<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">点击这里</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="vscode的终端无法执行hexo指令"><a href="#vscode的终端无法执行hexo指令" class="headerlink" title="vscode的终端无法执行hexo指令"></a>vscode的终端无法执行hexo指令</h3><ol><li>以管理员身份运行power shell<br>（备注：右键win标，选择 “Windows PowerShell(管理员)”打开即可）</li><li>输入 set-ExecutionPolicy RemoteSigned 回车</li><li>输入 A 或者 Y 回车</li></ol><h3 id="Hexo部署出现错误err-Error-Spawn-failed解决方式"><a href="#Hexo部署出现错误err-Error-Spawn-failed解决方式" class="headerlink" title="Hexo部署出现错误err: Error: Spawn failed解决方式"></a>Hexo部署出现错误err: Error: Spawn failed解决方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##进入项目根目录</span><br><span class="hljs-built_in">cd</span> 项目名字<br><br><span class="hljs-comment">##删除git提交内容文件夹</span><br>rm -rf .deploy_git/<br><br><span class="hljs-comment">##执行</span><br>git config --global core.autocrlf <span class="hljs-literal">false</span><br><br><span class="hljs-comment">##最后</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>微信扫一下二维码，不定时分享有趣的事情哦：</p><p><img src="/hexo-blog/img/page/pic.jpg" alt="pic"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
