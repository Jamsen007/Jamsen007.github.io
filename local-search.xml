<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式-策略模式（搭配自定义注解+枚举）</title>
    <link href="/hexo-blog/2021/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/hexo-blog/2021/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>链接</strong>：<br><a href="https://gitee.com/jasoninterface/design_pattern.git">这里就是Demo的链接地址，仅供参考哦</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>策略模式，顾名思义就是多种方法的意思。相信在互联网上各种资料都飞来飞去的情况，都知道这个作用了吧，<br>我主要说一下个人的理解。</p><p>一般使用策略模式，都会搭配模板模式，这两者的区别在于：</p><ul><li><strong>策略模式只是关注方法里面的实现逻辑。</strong></li><li><strong>模板模式只是关注于把多个方法抽离出来，注重于步骤。</strong></li></ul><p>当然，之所以搭配模板模式，一般都是方法比较多，而且都具有公共性质，所以才会抽离出来。</p><p>本教程主要使用策略模式+模板模式+自定义注解+枚举</p><p>下面直接开撸吧~~~</p><h2 id="开撸"><a href="#开撸" class="headerlink" title="开撸"></a>开撸</h2><p>1、去到spring官网，直接搭建一个spring boot项目。</p><p>2、创建枚举值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:20<br> **/<br>public enum PayCodeEnum &#123;<br><br>    PC_PAY(<span class="hljs-string">&quot;PC_PAY&quot;</span>,<span class="hljs-string">&quot;PC端支付&quot;</span>),<br>    MOBILE_PAY(<span class="hljs-string">&quot;MOBILE_PAY&quot;</span>,<span class="hljs-string">&quot;手机端支付&quot;</span>)<br><br>    ;<br><br>    private String key;<br>    private String value;<br><br>    PayCodeEnum(String key, String value) &#123;<br>        this.key = key;<br>        this.value = value;<br>    &#125;<br><br>    public String <span class="hljs-function"><span class="hljs-title">getKey</span></span>() &#123;<br>        <span class="hljs-built_in">return</span> key;<br>    &#125;<br><br>    public String <span class="hljs-function"><span class="hljs-title">getValue</span></span>() &#123;<br>        <span class="hljs-built_in">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、创建自定义注解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:24<br> **/<br>@Target(&#123;ElementType.TYPE&#125;)<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>public @interface PayChannel &#123;<br>    PayCodeEnum value();<br>&#125;<br></code></pre></td></tr></table></figure><p>4、创建公共接口，这里定义了具体提供给外部的接口，就是入口嘛。你懂的~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:11<br> **/<br>public interface IBizService &#123;<br><br>    void pay();<br><br>    void refund();<br>&#125;<br></code></pre></td></tr></table></figure><p>5、创建抽象类，该类就是用来封装粒度比较大的方法，然后使用模板方法抽离具体的方法步骤。~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:12<br> **/<br>@Slf4j<br>@Component<br>public abstract class BizAbstractService implements IBizService &#123;<br><br>    public abstract void verify();<br><br>    public abstract void buildParams();<br><br>    private void <span class="hljs-function"><span class="hljs-title">handlePay</span></span>()&#123;<br>        log.info(<span class="hljs-string">&quot;支付成功&quot;</span>);<br>    &#125;<br><br>    private void <span class="hljs-function"><span class="hljs-title">handleRefund</span></span>()&#123;<br>        log.info(<span class="hljs-string">&quot;退款成功&quot;</span>);<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">pay</span></span>() &#123;<br>        verify();<br>        handlePay();<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">refund</span></span>() &#123;<br>        buildParams();<br>        handleRefund();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、创建加载类，我喜欢用factory来命名，虽然不是个工厂类，不过就是想象一个专门把策略加载到一个容器里面的工厂！GO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:04<br> **/<br>@Component<br>public class BizFactory implements ApplicationContextAware, ApplicationListener&lt;ContextRefreshedEvent&gt; &#123;<br><br>    private ApplicationContext applicationContext;<br><br>    // 这个就是容器啦~，就像spring容器一样呗。<br>    private static final Map&lt;String, IBizService&gt; strategys = new ConcurrentHashMap&lt;&gt;();<br><br>    public IBizService getStrategy(String channel)&#123;<br>        // 这里可以提供给外部使用，到底用什么策略，通过参数定义<br>         <span class="hljs-built_in">return</span> Optional.ofNullable(strategys.get(channel))<br>            .orElseThrow(<br>                () -&gt;<br>                    new IllegalStateException(<span class="hljs-string">&quot;找不到该策略:&quot;</span> + channel));<br>    &#125;<br><br>    @Override<br>    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;<br>        this.applicationContext = applicationContext;<br>    &#125;<br><br>    private synchronized void <span class="hljs-function"><span class="hljs-title">init</span></span>()&#123;<br>        // 这个方法就是获取实现类某个接口的所有类，很有用的哦，开发的时候给你很大的便捷性。<br>        Map&lt;String, IBizService&gt; strategyMap = applicationContext.getBeansOfType(IBizService.class);<br>        // 这里就是围殴了装13而已，用了流的方式，高大上点有木有？<br>        strategyMap.forEach(<br>            (name, strategy) -&gt; &#123;<br>                PayChannel channel =<br>                    Optional.ofNullable(strategy.getClass().getAnnotation(PayChannel.class))<br>                        .orElseThrow(<br>                            () -&gt; new IllegalStateException(<span class="hljs-string">&quot;注册策略失败:&quot;</span> + name));<br>                strategys.putIfAbsent(channel.value().getKey(), strategy);<br>            &#125;);<br>    &#125;<br><br>    // 这里是加载策略的时机，其实也可以用注解，就不用实现 ApplicationListener&lt;ContextRefreshedEvent&gt;<br>    @Override<br>    public void onApplicationEvent(ContextRefreshedEvent event) &#123;<br>        init();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>7、创建两个策略，一个是PC端，一个是移动端~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:27<br> **/<br>@Service<br>@Slf4j<br>@PayChannel(value = PayCodeEnum.MOBILE_PAY)<br>public class PayByMobileService extends BizAbstractService &#123;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">verify</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;手机端校验参数&quot;</span>);<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">buildParams</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;手机端构建退款参数&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * @description:<br> * @author: gongjuncheng<br> * @date: 2021-12-12 21:25<br> **/<br>@Service<br>@Slf4j<br>@PayChannel(value = PayCodeEnum.PC_PAY)<br>public class PaybyPcService extends BizAbstractService &#123;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">verify</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;PC端校验参数&quot;</span>);<br>    &#125;<br><br>    @Override<br>    public void <span class="hljs-function"><span class="hljs-title">buildParams</span></span>() &#123;<br>        log.info(<span class="hljs-string">&quot;PC端构建退款参数&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8、开始测试~，不多BB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">@SpringBootTest<br>class PatternApplicationTests &#123;<br><br>@Resource<br>private BizFactory factory;<br><br>@Test<br>void <span class="hljs-function"><span class="hljs-title">contextLoads</span></span>() &#123;<br>factory.getStrategy(PayCodeEnum.PC_PAY.getKey()).pay();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>微信扫一下二维码，不定时分享有趣的事情哦：</p><p><img src="/hexo-blog/img/page/pic.jpg" alt="pic"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee + Hexo + Fluid 搭建个人免费网站</title>
    <link href="/hexo-blog/2021/10/17/Gitee%20+%20Hexo%20+%20Fluid%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99/"/>
    <url>/hexo-blog/2021/10/17/Gitee%20+%20Hexo%20+%20Fluid%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p><strong>链接</strong>：<br>1.<a href="https://hexo.io/">Hexo</a><br>2.<a href="https://gitee.com/">Gitee</a><br>3.<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid主题</a>  </p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="1-nodejs-npm的安装"><a href="#1-nodejs-npm的安装" class="headerlink" title="1. nodejs+npm的安装"></a>1. nodejs+npm的安装</h3><ul><li><strong>从nodejs官网直接下载，并且根据顺序安装文件到对应的位置，就完成</strong><br>因为nodejs内部已经集成npm，所以不必要分开下载，地址:<a href="https://nodejs.org/">nodejs+npm</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node -v  <br>$ npm -v<br></code></pre></td></tr></table></figure><p>上面校验本地是否安装完成，如下图：<br><img src="/hexo-blog/img/page/node+npm.jpg" alt="npm,nodejs"></p><ul><li><strong>新建node_global和node_cache文件夹，避免npm安装的依赖全部堆积到默认盘</strong></li></ul><p>因为默认的npm下载依赖安装路径都是在 ‘C:\Users\你自己电脑名字\AppData\Roaming\npm’ 路径下面，所以我们一般会更改这个位置</p><p>1.在安装nodejs的目录下，新建上面两个文件夹，如下图：<br><img src="/hexo-blog/img/page/createFolder.png" alt="folder"></p><p>2.配置全局环境变量</p><p>用户变量：<br>编辑PATH，添加’C:\Program Files\nodejs\node_global’路径<br>系统变量：<br>新建变量，名字NODE_PATH,值’C:\Program Files\nodejs\node_modules’</p><p>3.然后运行执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;C:\Program Files\nodejs\node_global&quot;</span>  <br>$ npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;C:\Program Files\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>最后npm安装的路径就会改变，查看效果，如下图:<br><img src="/hexo-blog/img/page/npmPath.jpg" alt="path"></p><h3 id="2-Git安装"><a href="#2-Git安装" class="headerlink" title="2. Git安装"></a>2. Git安装</h3><p>从Git官网下载稳定的版本，然后开始无脑点击下一步安装即可。<a href="https://git-scm.com/downloads">Git地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git version<br></code></pre></td></tr></table></figure><p>上面校验本地是否安装完成，如下图：<br><img src="/hexo-blog/img/page/git.png" alt="git"></p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="1-搭建Hexo网站"><a href="#1-搭建Hexo网站" class="headerlink" title="1. 搭建Hexo网站"></a>1. 搭建Hexo网站</h3><ul><li><p><strong>下载脚手架</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全局安装</span><br>$ npm install hexo-cli -g<br><span class="hljs-comment"># 查看hexo版本</span><br>$ hexo -v<br><br><span class="hljs-comment">#出现下面的，就是安装成功</span><br>hexo-cli: 4.3.0<br>os: win32 10.0.18363<br>node: 14.18.1<br>v8: 8.4.371.23-node.84<br>uv: 1.42.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.17.2<br>modules: 83<br>nghttp2: 1.42.0<br>napi: 8<br>llhttp: 2.1.4<br>openssl: 1.1.1l<br>cldr: 39.0<br>icu: 69.1<br>tz: 2021a<br>unicode: 13.0<br></code></pre></td></tr></table></figure></li><li><p><strong>初始化项目</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init 项目名字 <span class="hljs-comment"># 初始化</span><br><br>found 0 vulnerabilities<br>INFO  Start blogging with Hexo! <span class="hljs-comment">#安装成功</span><br><br>$ <span class="hljs-built_in">cd</span> 项目名字 <span class="hljs-comment"># 进入目录</span><br>$ npm install <span class="hljs-comment"># 安装npm</span><br>$ hexo server <span class="hljs-comment"># 启动服务</span><br><br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. <span class="hljs-comment"># 部署成功</span><br><br></code></pre></td></tr></table></figure><p>如下图：<br><img src="/hexo-blog/img/page/hexoSucceed.png" alt="succeed"></p><h3 id="2-部署网站到Gitee"><a href="#2-部署网站到Gitee" class="headerlink" title="2. 部署网站到Gitee"></a>2. 部署网站到Gitee</h3><ul><li><p><strong>创建账号</strong><br>这步可以跳过了吧，哈哈。</p></li><li><p><strong>新建仓库</strong></p></li></ul><p>仓库名称和仓库路径要尽量保持一致。</p><ul><li><strong>配置ssh</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># gitee用户名</span><br>$ git config --global user.email <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 邮箱</span><br><span class="hljs-comment"># 生成SSH公钥并添加到gitee，实现免密码登录</span><br><span class="hljs-comment"># 1、生成公钥</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;# 邮箱&quot;</span> <br></code></pre></td></tr></table></figure><p>把 C:\Users\主机名.ssh 目录，把 密钥名字.pub 里面的信息复制到gitee的 SSH公钥 </p><ul><li><strong>配置gitee pages</strong></li></ul><p>进入到仓库，点击管理选项，点击选项初始化 README.md 快速开启 SVN访问，然后点击服务，选择Gitee Pages，如果这个是第一次操作，需要身份证上传核实，然后等一天就可以重新回到这个界面操作。</p><p>然后按照下图操作即可：<br><img src="/hexo-blog/img/page/giteePagesConfig.png" alt="gitee pages"></p><ul><li><strong>配置项目的_config.yml文件</strong></li></ul><ol><li>修改url中的Gitee Pages地址</li><li>语言可修改为中文language: zh-cn</li><li>deploy 修改为Gitee Pages 的地址</li></ol><p>如下图：<br><img src="/hexo-blog/img/page/updateConfig.png" alt="config"></p><p><img src="/hexo-blog/img/page/repo.jpg" alt="config"></p><ul><li><strong>部署项目</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> 项目名字  <span class="hljs-comment">#进入项目目录</span><br>$ hexo clean <span class="hljs-comment">#清理缓存</span><br>$ hexo g <span class="hljs-comment">#生成网站文件</span><br>$ hexo s <span class="hljs-comment">#本地测试代码，Ctrl+c停止本地映射</span><br>$ hexo d <span class="hljs-comment">#推送本地代码到码云，第一推送需要输入gitee的账号密码 </span><br></code></pre></td></tr></table></figure><p>注意，每次部署了项目，都要在Gitee Pages里面点击更新</p><h3 id="3-搭配Fluid主题"><a href="#3-搭配Fluid主题" class="headerlink" title="3. 搭配Fluid主题"></a>3. 搭配Fluid主题</h3><p><strong>创建fluid的配置文件，该文件会永久覆盖_config.yml文件</strong></p><p>修改_config.yml的配置，找到theme，指定主题为：fluid</p><p>在_config.yml同目录创建_config.fluid.yml文件，里面的内容直接拷贝<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">这里</a></p><p>然后重启，就完成了。</p><p>如需要继续编辑或者写文章，<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">点击这里</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="vscode的终端无法执行hexo指令"><a href="#vscode的终端无法执行hexo指令" class="headerlink" title="vscode的终端无法执行hexo指令"></a>vscode的终端无法执行hexo指令</h3><ol><li>以管理员身份运行power shell<br>（备注：右键win标，选择 “Windows PowerShell(管理员)”打开即可）</li><li>输入 set-ExecutionPolicy RemoteSigned 回车</li><li>输入 A 或者 Y 回车</li></ol><h3 id="Hexo部署出现错误err-Error-Spawn-failed解决方式"><a href="#Hexo部署出现错误err-Error-Spawn-failed解决方式" class="headerlink" title="Hexo部署出现错误err: Error: Spawn failed解决方式"></a>Hexo部署出现错误err: Error: Spawn failed解决方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##进入项目根目录</span><br><span class="hljs-built_in">cd</span> 项目名字<br><br><span class="hljs-comment">##删除git提交内容文件夹</span><br>rm -rf .deploy_git/<br><br><span class="hljs-comment">##执行</span><br>git config --global core.autocrlf <span class="hljs-literal">false</span><br><br><span class="hljs-comment">##最后</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>微信扫一下二维码，不定时分享有趣的事情哦：</p><p><img src="/hexo-blog/img/page/pic.jpg" alt="pic"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
